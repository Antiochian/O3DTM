function plot_histogram(value_matrix, title_str, label_str, limit_arr, no_nan_title, num_bins, strict_limits, cmap_name)
% PLOT_HISTOGRAM plots histogram with bar colours consistent with parameter
% map (from plot_map). Use one argument specifying file path of data file
% (generated by generate_map) to plot histogram of.
%
% PLOT_HISTOGRAM(value_matrix, title_str, label_str, limit_arr, no_nan_title, num_bins, strict_limits, cmap_name)

%% Deal with arguments
if nargin == 1
    title_str = '';
    label_str = '';
end
if ischar(value_matrix)
    data_path = value_matrix;
    data_from_file = load(data_path);
    data = data_from_file.data;
    value_matrix = data.value_matrix;
    if nargin < 2 || isempty(title_str)
        title_str = data.plot_title;
    end
    if nargin < 3 || isempty(label_str)
        label_str = data.plot_label;
    end
end
if nargin < 4 || isempty(limit_arr) || (limit_arr(1) == -inf && limit_arr(2) == inf)
    limit_arr = [-inf, inf];
    nan_fraction = sum(sum(isnan(value_matrix)))/numel(value_matrix);
    if nan_fraction > 0 || (nargin >= 5 && no_nan_title)
%         title_str = sprintf('%s [full range, %.2f%% NaN]', title_str, nan_fraction*100);
    end
end
if nargin < 6 || isempty(num_bins)
    num_bins = 150;
end
if nargin < 7
    strict_limits = false;
end
if nargin < 8
    cmap_name = 'viridis';
end

if ~ischar(title_str)
    title_str{2} = strcat('{\rm\color{gray}\fontsize{8}', title_str{2}, '}');
end

%% Set up plot axis
clf
fig = gcf;
fig.PaperUnits = 'inches';
fig.PaperPosition = [0 0 12 6];
ax = gca;
outerpos = ax.OuterPosition;
ti = ax.TightInset; 
lr_margin = 0.05;
tb_margin = 0.075;
left = outerpos(1) + ti(1) + lr_margin;
bottom = outerpos(2) + ti(2) + tb_margin;
ax_width = outerpos(3) - ti(1) - ti(3) - 2*lr_margin;
ax_height = outerpos(4) - ti(2) - ti(4) - 2*tb_margin;
ax.Position = [left bottom ax_width ax_height];

%% Calculate values
value_matrix = reshape(value_matrix, 1, []);
% Do histogram calculations with strict limits
value_matrix_temp = value_matrix(value_matrix >= limit_arr(1));
value_matrix_temp = value_matrix_temp(value_matrix_temp <= limit_arr(2));
[bin_value_arr, bin_edge_arr] = histcounts(value_matrix_temp , num_bins);
if ~strict_limits
    % Expand range slightly so that all points within bin are counted for
    % bar (e.g. as otherwise bin could start below limit_arr(1) etc.)
    value_matrix = value_matrix(value_matrix >= bin_edge_arr(1));
    value_matrix = value_matrix(value_matrix <= bin_edge_arr(end));
    bin_value_arr = histcounts(value_matrix, bin_edge_arr);
end
bin_center_arr = bin_edge_arr(2:end) - 0.5*(bin_edge_arr(2)-bin_edge_arr(1));
cmap_h = str2func(cmap_name);
color_matrix = cmap_h(num_bins);
%% Create histogram
bar(bin_center_arr, bin_value_arr, 1, 'FaceColor', 'flat', 'CData', color_matrix);
xlim([bin_edge_arr(1), bin_edge_arr(end)])
xlabel(label_str)
ylabel('Counts')
title(title_str)
grid on
drawnow
end